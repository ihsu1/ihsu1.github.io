<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/home/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/home/" rel="alternate" type="text/html" /><updated>2024-10-21T20:56:18-04:00</updated><id>http://localhost:4000/home/feed.xml</id><title type="html">Ingrid Hsu</title><subtitle>Computer Science and Philosophy double major at Swarthmore College interested in AI, cognitive science, and tech ethics.</subtitle><entry><title type="html">Asciimation</title><link href="http://localhost:4000/home/projects/2024/10/04/Asciimation.html" rel="alternate" type="text/html" title="Asciimation" /><published>2024-10-04T00:00:00-04:00</published><updated>2024-10-04T00:00:00-04:00</updated><id>http://localhost:4000/home/projects/2024/10/04/Asciimation</id><content type="html" xml:base="http://localhost:4000/home/projects/2024/10/04/Asciimation.html"><![CDATA[<p>This project was the fifth overall (and second partnered) lab of my CPSC 035 Data Structures and Algorithms course. The task was to write and use a linked list data structure to play an ASCII art animation with text. The goal of this lab was to understand the following in C++:</p>
<ul>
  <li>Implementing and testing a linked list</li>
  <li>Complexity requirements</li>
  <li>Reading .asciimation format videos</li>
  <li>Using the STL pair class</li>
</ul>

<p>Check out the <a href="https://gitfront.io/r/ihsu1/SzSYMTRb73xe/ASCIImation/">Github</a> for the code!</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[This project was the fifth overall (and second partnered) lab of my CPSC 035 Data Structures and Algorithms course. The task was to write and use a linked list data structure to play an ASCII art animation with text. The goal of this lab was to understand the following in C++: Implementing and testing a linked list Complexity requirements Reading .asciimation format videos Using the STL pair class]]></summary></entry><entry><title type="html">Shapes</title><link href="http://localhost:4000/home/projects/2024/09/20/Shapes.html" rel="alternate" type="text/html" title="Shapes" /><published>2024-09-20T00:00:00-04:00</published><updated>2024-09-20T00:00:00-04:00</updated><id>http://localhost:4000/home/projects/2024/09/20/Shapes</id><content type="html" xml:base="http://localhost:4000/home/projects/2024/09/20/Shapes.html"><![CDATA[<p>This project was the third lab of my CPSC 035 Data Structures and Algorithms course. The task was to design a hierarchy of classes that allows users to draw various shapes(Point, HorizontalLine, VerticalLine, and Rectangle.) onto a grid printed to the command line. The goal of this lab was to understand the following in C++:</p>
<ul>
  <li>Classes and Objects</li>
  <li>Inheritance</li>
  <li>Polymorphism</li>
  <li>Memory management.</li>
</ul>

<p>Check out the <a href="https://gitfront.io/r/ihsu1/d5gbmr4DrUpk/QuickSort/">Github</a> for the code!</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[This project was the third lab of my CPSC 035 Data Structures and Algorithms course. The task was to design a hierarchy of classes that allows users to draw various shapes(Point, HorizontalLine, VerticalLine, and Rectangle.) onto a grid printed to the command line. The goal of this lab was to understand the following in C++: Classes and Objects Inheritance Polymorphism Memory management.]]></summary></entry><entry><title type="html">PicFilter</title><link href="http://localhost:4000/home/projects/2024/09/13/PicFilter-copy.html" rel="alternate" type="text/html" title="PicFilter" /><published>2024-09-13T00:00:00-04:00</published><updated>2024-09-13T00:00:00-04:00</updated><id>http://localhost:4000/home/projects/2024/09/13/PicFilter%20copy</id><content type="html" xml:base="http://localhost:4000/home/projects/2024/09/13/PicFilter-copy.html"><![CDATA[<p>This project was the second lab of my CPSC 035 Data Structures and Algorithms course. The task was to apply various filters (noRed, noGreen, noBlue, invert, grayscale, flipHorizontally, and flipVertically) to a particular image file format. The goal of this lab was to understand the following in C++:</p>
<ul>
  <li>Command-line arguments</li>
  <li>Dynamically-allocated arrays (and memory management)</li>
  <li>Organizing code into separate files</li>
  <li>Defensive programming (e.g. detecting invalid input)</li>
</ul>

<!-- Jekyll requires blog post files to be named according to the following format:

`YEAR-MONTH-DAY-title.MARKUP`

Where `YEAR` is a four-digit number, `MONTH` and `DAY` are both two-digit numbers, and `MARKUP` is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works. -->

<!-- Jekyll also offers powerful support for code snippets:


<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>
 -->

<p>Check out the <a href="https://gitfront.io/r/ihsu1/tefm2WdMTYsm/PicFilter/">Github</a> for the code!</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[This project was the second lab of my CPSC 035 Data Structures and Algorithms course. The task was to apply various filters (noRed, noGreen, noBlue, invert, grayscale, flipHorizontally, and flipVertically) to a particular image file format. The goal of this lab was to understand the following in C++: Command-line arguments Dynamically-allocated arrays (and memory management) Organizing code into separate files Defensive programming (e.g. detecting invalid input)]]></summary></entry><entry><title type="html">EEG Emotion Recognition</title><link href="http://localhost:4000/home/projects/2024/04/25/EEG.html" rel="alternate" type="text/html" title="EEG Emotion Recognition" /><published>2024-04-25T00:00:00-04:00</published><updated>2024-04-25T00:00:00-04:00</updated><id>http://localhost:4000/home/projects/2024/04/25/EEG</id><content type="html" xml:base="http://localhost:4000/home/projects/2024/04/25/EEG.html"><![CDATA[<p>This project was the symposium project for my high school Advanced AI course. It is a model that classifies brain EEGs (signals measuring electrical activity in the brain) with a corresponding emotional state (positive, negative, or neutral). This dataset didn’t require preprocessing of raw EEGs, which was a big part of my previous EEG project. Instead, the dataset I used came with already cleaned and processed data, so the main component of this project was building the model to classify. The final goal for this project was to extend this model’s application to individuals with Autism Spectrum Disorder, providing support and enhancing well-being through improved emotional regulation/social skills within this user-group.</p>

<p>My process consisted of: Exploratory data analysis , standard scaling , MLP model , neural network , model evaluation. The MLP (based on the papers linked below) and feedforward neural network reached around 94% and 97% accuracies for each model respectively.</p>
<ul>
  <li>Dataset: <a href="https://www.kaggle.com/datasets/birdy654/eeg-brainwave-dataset-feeling-emotions/data">EEG Brainwave Dataset: Feeling Emotions</a></li>
  <li>Papers:
    <ul>
      <li><a href="https://www.researchgate.net/publication/329403546_Mental_Emotional_Sentiment_Classification_with_an_EEG-based_Brain-machine_Interface">Mental Emotional Sentiment Classification with an EEG-based Brain-machine Interface</a></li>
      <li><a href="https://www.researchgate.net/publication/335173767_A_Deep_Evolutionary_Approach_to_Bioinspired_Classifier_Optimisation_for_Brain-Machine_Interaction">A Deep Evolutionary Approach to Bioinspired Classifier Optimisation for Brain-Machine Interaction</a></li>
    </ul>
  </li>
</ul>

<p>Check out the <a href="https://github.com/ihsu1/EEGEmotionRecognition">Github</a> for the code!</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[This project was the symposium project for my high school Advanced AI course. It is a model that classifies brain EEGs (signals measuring electrical activity in the brain) with a corresponding emotional state (positive, negative, or neutral). This dataset didn’t require preprocessing of raw EEGs, which was a big part of my previous EEG project. Instead, the dataset I used came with already cleaned and processed data, so the main component of this project was building the model to classify. The final goal for this project was to extend this model’s application to individuals with Autism Spectrum Disorder, providing support and enhancing well-being through improved emotional regulation/social skills within this user-group.]]></summary></entry></feed>