<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-25T09:55:01-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ingrid Hsu</title><subtitle>Computer Science and Philosophy double major at Swarthmore College interested in AI, cognitive science, and tech ethics.</subtitle><entry><title type="html">x86_64 Assembly</title><link href="http://localhost:4000/projects/2025/02/28/x86_64-Assembly.html" rel="alternate" type="text/html" title="x86_64 Assembly" /><published>2025-02-28T00:00:00-05:00</published><updated>2025-02-28T00:00:00-05:00</updated><id>http://localhost:4000/projects/2025/02/28/x86_64%20Assembly</id><content type="html" xml:base="http://localhost:4000/projects/2025/02/28/x86_64-Assembly.html"><![CDATA[<p>This project was the fifth lab of my CPSC 031 Introduction to Computer Systems course. The task was to write sum and compare functions with assembly code.<br />
The overall goals of this lab were to:</p>
<ul>
  <li>Gain experience translating C code x86_64 Assembly and go-to functions (and vice versa) to enhance understanding of underlying data structure access, and function calls.</li>
  <li>Understand in more detail the mechanics of C “pass-by-pointer” style parameters and function calls.</li>
</ul>

<p>Due to class policy, please reach out for the code!</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[This project was the fifth lab of my CPSC 031 Introduction to Computer Systems course. The task was to write sum and compare functions with assembly code. The overall goals of this lab were to: Gain experience translating C code x86_64 Assembly and go-to functions (and vice versa) to enhance understanding of underlying data structure access, and function calls. Understand in more detail the mechanics of C “pass-by-pointer” style parameters and function calls.]]></summary></entry><entry><title type="html">C Pointers</title><link href="http://localhost:4000/projects/2025/02/21/C-Pointers.html" rel="alternate" type="text/html" title="C Pointers" /><published>2025-02-21T00:00:00-05:00</published><updated>2025-02-21T00:00:00-05:00</updated><id>http://localhost:4000/projects/2025/02/21/C%20Pointers</id><content type="html" xml:base="http://localhost:4000/projects/2025/02/21/C-Pointers.html"><![CDATA[<p>This project was the fourth lab of my CPSC 031 Introduction to Computer Systems course. The task was to use C pointers, arrays, and File I/O to perform basic statistics (num values, min, max, mean, median, stddev, unused array capacity) on climate change data spanning 1961 to 2022. The lab contexualized our work in the course with the staggering impact of computation and “Big Data” on climate change.
The overall goals of this lab were to:</p>
<ul>
  <li>Gain experience using pointers, dynamic memory allocation (malloc), and File I/O in C.</li>
  <li>Observe how machine code instructions are executed by digital circuits.</li>
  <li>Practice using gdb and valgrind to debug programs.</li>
  <li>Apply top-down design and maintain modualar, robust, and well-formated code, including top-level and function-level comments.</li>
</ul>

<p>Due to class policy, please reach out for the code!</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[This project was the fourth lab of my CPSC 031 Introduction to Computer Systems course. The task was to use C pointers, arrays, and File I/O to perform basic statistics (num values, min, max, mean, median, stddev, unused array capacity) on climate change data spanning 1961 to 2022. The lab contexualized our work in the course with the staggering impact of computation and “Big Data” on climate change. The overall goals of this lab were to: Gain experience using pointers, dynamic memory allocation (malloc), and File I/O in C. Observe how machine code instructions are executed by digital circuits. Practice using gdb and valgrind to debug programs. Apply top-down design and maintain modualar, robust, and well-formated code, including top-level and function-level comments.]]></summary></entry><entry><title type="html">Building an ALU</title><link href="http://localhost:4000/projects/2025/02/14/Building-an-ALU.html" rel="alternate" type="text/html" title="Building an ALU" /><published>2025-02-14T00:00:00-05:00</published><updated>2025-02-14T00:00:00-05:00</updated><id>http://localhost:4000/projects/2025/02/14/Building%20an%20ALU</id><content type="html" xml:base="http://localhost:4000/projects/2025/02/14/Building-an-ALU.html"><![CDATA[<p>This project was the third lab of my CPSC 031 Introduction to Computer Systems course. It was a two-week lab. The task was to construct an Arithmetic Logic Unit from scratch with Logisim. The ALU had to perform the following operations while maintaining correct condition codes: bit-wise or, bit-wise and, 8-bit addition, 8-bit subtraction, left shift, logical right shift, arithmetic right shift, and a comparator operation. 
The overall goals of this lab were to:</p>
<ul>
  <li>Build, test, and simulate digital circuits.</li>
  <li>Observe how machine code instructions are executed by digital circuits.</li>
  <li>Apply incremental implementation and testing to design.</li>
</ul>

<p>Due to class policy, please reach out for the program!</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[This project was the third lab of my CPSC 031 Introduction to Computer Systems course. It was a two-week lab. The task was to construct an Arithmetic Logic Unit from scratch with Logisim. The ALU had to perform the following operations while maintaining correct condition codes: bit-wise or, bit-wise and, 8-bit addition, 8-bit subtraction, left shift, logical right shift, arithmetic right shift, and a comparator operation. The overall goals of this lab were to: Build, test, and simulate digital circuits. Observe how machine code instructions are executed by digital circuits. Apply incremental implementation and testing to design.]]></summary></entry><entry><title type="html">Inroads</title><link href="http://localhost:4000/projects/2024/12/10/Inroads.html" rel="alternate" type="text/html" title="Inroads" /><published>2024-12-10T00:00:00-05:00</published><updated>2024-12-10T00:00:00-05:00</updated><id>http://localhost:4000/projects/2024/12/10/Inroads</id><content type="html" xml:base="http://localhost:4000/projects/2024/12/10/Inroads.html"><![CDATA[<p>This project was the ninth and final lab of my CPSC 035 Data Structures and Algorithms course. The task was to apply graph-based algorithms to implement a single-player game called Inroads, which involves repairing a community’s aging roads and earning points based on a given set of rules and how much of the community is able to access services via the newly-improved roadway. The goal of this lab was to accomplish the following in C++:</p>
<ul>
  <li>Practice software design, specifically top-down design</li>
  <li>Implement graph algorithms (Depth-first search, Breadth-first search, Dijkstra’s algorithm)</li>
  <li>Apply graph algorithms to solve graph-based problems</li>
  <li>Create a single-player game</li>
</ul>

<p>Due to class policy, please reach out for the code!</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[This project was the ninth and final lab of my CPSC 035 Data Structures and Algorithms course. The task was to apply graph-based algorithms to implement a single-player game called Inroads, which involves repairing a community’s aging roads and earning points based on a given set of rules and how much of the community is able to access services via the newly-improved roadway. The goal of this lab was to accomplish the following in C++: Practice software design, specifically top-down design Implement graph algorithms (Depth-first search, Breadth-first search, Dijkstra’s algorithm) Apply graph algorithms to solve graph-based problems Create a single-player game]]></summary></entry><entry><title type="html">Efficient Keyword Search</title><link href="http://localhost:4000/projects/2024/11/21/Keyword-Search.html" rel="alternate" type="text/html" title="Efficient Keyword Search" /><published>2024-11-21T00:00:00-05:00</published><updated>2024-11-21T00:00:00-05:00</updated><id>http://localhost:4000/projects/2024/11/21/Keyword%20Search</id><content type="html" xml:base="http://localhost:4000/projects/2024/11/21/Keyword-Search.html"><![CDATA[<p>This project was the eighth lab of my CPSC 035 Data Structures and Algorithms course. The task was to read in documents and then repeatedly search it for particular keywords, finding the ten most relevant pages that contain that keyword.
The goal of this lab was to accomplish the following in C++:</p>
<ul>
  <li>Implement the Dictionary ADT through a LinearDictionary</li>
  <li>Implement the Dictionary ADT through a HashTable</li>
  <li>Create a KeywordSearcher class that uses these implementations and a PriorityQueue to search documents</li>
  <li>Write a main program that gracefully handles bad inputs</li>
</ul>

<p>Due to class policy, please reach out for the code!</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[This project was the eighth lab of my CPSC 035 Data Structures and Algorithms course. The task was to read in documents and then repeatedly search it for particular keywords, finding the ten most relevant pages that contain that keyword. The goal of this lab was to accomplish the following in C++: Implement the Dictionary ADT through a LinearDictionary Implement the Dictionary ADT through a HashTable Create a KeywordSearcher class that uses these implementations and a PriorityQueue to search documents Write a main program that gracefully handles bad inputs]]></summary></entry><entry><title type="html">Binary Search Trees</title><link href="http://localhost:4000/projects/2024/11/12/BSTs.html" rel="alternate" type="text/html" title="Binary Search Trees" /><published>2024-11-12T00:00:00-05:00</published><updated>2024-11-12T00:00:00-05:00</updated><id>http://localhost:4000/projects/2024/11/12/BSTs</id><content type="html" xml:base="http://localhost:4000/projects/2024/11/12/BSTs.html"><![CDATA[<p>This project was the seventh lab of my CPSC 035 Data Structures and Algorithms course. The task was to implement and test the binary search tree data structure with unit tests and a word-counting program. There was also an accompanying written work section on AVL trees and heaps. The goal of this lab was to practice the following in C++:</p>
<ul>
  <li>Implementing BSTs, including 4 traversal methods</li>
  <li>Writing unit tests</li>
  <li>Using valgrind to catch memory errors/leaks</li>
  <li>Understanding balanced BSTs and heaps</li>
</ul>

<p>Due to class policy, please reach out for the code!</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[This project was the seventh lab of my CPSC 035 Data Structures and Algorithms course. The task was to implement and test the binary search tree data structure with unit tests and a word-counting program. There was also an accompanying written work section on AVL trees and heaps. The goal of this lab was to practice the following in C++: Implementing BSTs, including 4 traversal methods Writing unit tests Using valgrind to catch memory errors/leaks Understanding balanced BSTs and heaps]]></summary></entry><entry><title type="html">Maze</title><link href="http://localhost:4000/projects/2024/10/29/Maze.html" rel="alternate" type="text/html" title="Maze" /><published>2024-10-29T00:00:00-04:00</published><updated>2024-10-29T00:00:00-04:00</updated><id>http://localhost:4000/projects/2024/10/29/Maze</id><content type="html" xml:base="http://localhost:4000/projects/2024/10/29/Maze.html"><![CDATA[<p>This project was the sixth lab of my CPSC 035 Data Structures and Algorithms course. It was our first two-week lab, and the task had 3 parts:</p>
<ol>
  <li>Implementing stack and queue data structures</li>
  <li>Writing an application to solve a maze using either breadth-first or depth-first search</li>
  <li>Answering written questions involving induction</li>
</ol>

<p>The goal of this lab was to gain practice with the following:</p>
<ul>
  <li>Stacks and queues</li>
  <li>Depth-first search</li>
  <li>Breadth-first search</li>
  <li>Induction</li>
</ul>

<p>Due to class policy, please reach out for the code!</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[This project was the sixth lab of my CPSC 035 Data Structures and Algorithms course. It was our first two-week lab, and the task had 3 parts: Implementing stack and queue data structures Writing an application to solve a maze using either breadth-first or depth-first search Answering written questions involving induction]]></summary></entry><entry><title type="html">Asciimation</title><link href="http://localhost:4000/projects/2024/10/04/Asciimation.html" rel="alternate" type="text/html" title="Asciimation" /><published>2024-10-04T00:00:00-04:00</published><updated>2024-10-04T00:00:00-04:00</updated><id>http://localhost:4000/projects/2024/10/04/Asciimation</id><content type="html" xml:base="http://localhost:4000/projects/2024/10/04/Asciimation.html"><![CDATA[<p>This project was the fifth overall (and second partnered) lab of my CPSC 035 Data Structures and Algorithms course. The task was to write and use a linked list data structure to play an ASCII art animation with text. The goal of this lab was to understand the following in C++:</p>
<ul>
  <li>Implementing and testing a linked list</li>
  <li>Complexity requirements</li>
  <li>Reading .asciimation format videos</li>
  <li>Using the STL pair class</li>
</ul>

<p>Check out the <a href="https://gitfront.io/r/ihsu1/SzSYMTRb73xe/ASCIImation/">Github</a> for the code!</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[This project was the fifth overall (and second partnered) lab of my CPSC 035 Data Structures and Algorithms course. The task was to write and use a linked list data structure to play an ASCII art animation with text. The goal of this lab was to understand the following in C++: Implementing and testing a linked list Complexity requirements Reading .asciimation format videos Using the STL pair class]]></summary></entry><entry><title type="html">QuickSort and Big-O</title><link href="http://localhost:4000/projects/2024/09/25/QuickSort.html" rel="alternate" type="text/html" title="QuickSort and Big-O" /><published>2024-09-25T00:00:00-04:00</published><updated>2024-09-25T00:00:00-04:00</updated><id>http://localhost:4000/projects/2024/09/25/QuickSort</id><content type="html" xml:base="http://localhost:4000/projects/2024/09/25/QuickSort.html"><![CDATA[<p>This project was the fourth lab (and first partner lab!) of my CPSC 035 Data Structures and Algorithms course. The task was to test and implement the Quick Sort algorithm and complete an accompanying written section on Big-O complexity. The goal of this lab was to gain familiarity the following:</p>
<ul>
  <li>the Quick Sort algorithm</li>
  <li>Writing unit tests</li>
  <li>Forrmal Big-O proofs</li>
  <li>Using basic LaTeX</li>
  <li>Partner etiquette in team labs</li>
</ul>

<p>Due to class policy, please reach out for the code!</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[This project was the fourth lab (and first partner lab!) of my CPSC 035 Data Structures and Algorithms course. The task was to test and implement the Quick Sort algorithm and complete an accompanying written section on Big-O complexity. The goal of this lab was to gain familiarity the following: the Quick Sort algorithm Writing unit tests Forrmal Big-O proofs Using basic LaTeX Partner etiquette in team labs]]></summary></entry><entry><title type="html">Shapes</title><link href="http://localhost:4000/projects/2024/09/20/Shapes.html" rel="alternate" type="text/html" title="Shapes" /><published>2024-09-20T00:00:00-04:00</published><updated>2024-09-20T00:00:00-04:00</updated><id>http://localhost:4000/projects/2024/09/20/Shapes</id><content type="html" xml:base="http://localhost:4000/projects/2024/09/20/Shapes.html"><![CDATA[<p>This project was the third lab of my CPSC 035 Data Structures and Algorithms course. The task was to design a hierarchy of classes that allows users to draw various shapes(Point, HorizontalLine, VerticalLine, and Rectangle.) onto a grid printed to the command line. The goal of this lab was to understand the following in C++:</p>
<ul>
  <li>Classes and Objects</li>
  <li>Inheritance</li>
  <li>Polymorphism</li>
  <li>Memory management.</li>
</ul>

<p>Check out the <a href="https://gitfront.io/r/ihsu1/d5gbmr4DrUpk/QuickSort/">Github</a> for the code!</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[This project was the third lab of my CPSC 035 Data Structures and Algorithms course. The task was to design a hierarchy of classes that allows users to draw various shapes(Point, HorizontalLine, VerticalLine, and Rectangle.) onto a grid printed to the command line. The goal of this lab was to understand the following in C++: Classes and Objects Inheritance Polymorphism Memory management.]]></summary></entry></feed>